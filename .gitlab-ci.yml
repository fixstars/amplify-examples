workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH || $CI_COMMIT_TAG"

stages:
  - test
  - format
  - output
  - push

execute changes:
  stage: test
  tags:
    - docker
  image: python:3.10
  script:
    - apt-get update && apt-get install -y libgl1-mesa-dev
    - pip install pipenv
    - pipenv install --skip-lock
    - |-
      for NBPATH in $(git diff --name-only HEAD^..HEAD | grep '.ipynb' | grep -v 'demo'); do
          echo "[NbConvertApp] Executing notebook $NBPATH"
          OUTPUT=$(pipenv run jupyter nbconvert --to html --stdout --execute "$NBPATH" --log-level WARN 2>&1 >/dev/null) || true
          if [ -n "$OUTPUT" ]; then
              echo "$OUTPUT" 1>&2
              STATUS=1
          fi
      done
  rules:
    - changes:
        - notebooks/**/*.ipynb

execute all:
  stage: test
  tags:
    - docker
  image: python:3.10
  script:
    - apt-get update && apt-get install -y libgl1-mesa-dev
    - pip install pipenv
    - pipenv install --skip-lock
    - |-
      for NBPATH in $(/bin/ls -1 notebooks/{en,ja}/{tutorials,examples}/*.ipynb); do
          echo "[NbConvertApp] Executing notebook $NBPATH"
          OUTPUT=$(pipenv run jupyter nbconvert --to html --stdout --execute "$NBPATH" --log-level WARN 2>&1 >/dev/null) || true
          if [ -n "$OUTPUT" ]; then
              echo "$OUTPUT" 1>&2
              STATUS=1
          fi
      done
    - if [ -n "$STATUS" ]; then exit 1; fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - notebooks/**/*.ipynb
      when: on_success
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
  allow_failure: true

format:
  stage: format
  tags:
    - docker
  image: python:3.10
  script:
    - git remote set-url origin https://gitlab-ci-token:$GITLAB_API_ACCESS_TOKEN@${CI_REPOSITORY_URL##*@}
    - git config user.email "noreply@fixstars.com"
    - git config user.name "GitLab Bot"
    - git fetch origin $CI_COMMIT_REF_NAME
    - git switch -C $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME
    - git clean -xfd
    - apt-get update && apt-get install -y jq
    - pip install pipenv
    - pipenv install --skip-lock
    - pipenv run ./format.sh
    - git add -u
    - |-
      if [ $(git status -s -uno --ignore-submodules=all | wc -l) -gt 0 ]; then
          git commit -m "🎨 Format"
          git push origin $CI_COMMIT_REF_NAME
          exit 1
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

html:
  stage: output
  tags:
    - docker
  image: python:3.10
  script:
    - git remote set-url origin https://gitlab-ci-token:$GITLAB_API_ACCESS_TOKEN@${CI_REPOSITORY_URL##*@}
    - git config user.email "noreply@fixstars.com"
    - git config user.name "GitLab Bot"
    - git fetch origin $CI_COMMIT_REF_NAME
    - git switch -C $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME
    - git clean -xfd
    - pip install pipenv
    - pipenv install --skip-lock
    - rm -rf html
    - pipenv run ./make-html.sh
    - git add -u
    - |-
      if [ $(git status -s -uno --ignore-submodules=all | wc -l) -gt 0 ]; then
          git commit -m "📝 Update html files"
          git push origin $CI_COMMIT_REF_NAME
          exit 1
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

sync-repositories:
  stage: push
  tags:
    - docker
  image: bitnami/git
  resource_group: git-push
  script:
    # prepare remote repositories
    - git remote set-url origin https://gitlab-ci-token:$GITLAB_API_ACCESS_TOKEN@${CI_REPOSITORY_URL##*@}
    - git config remote.github.url >&- && git remote set-url github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/fixstars/amplify-examples.git || git remote add github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/fixstars/amplify-examples.git
    - git config user.email "noreply@fixstars.com"
    - git config user.name "GitLab Bot"
    - git fetch github main
    - git fetch origin main develop
    - git switch -C develop origin/develop
    - git clean -xfd
    # rebase and push
    - git status
    - git rebase github/main
    - git push origin develop
    - git push origin develop:main
    - git push github develop:main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'
